<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
  PolicySchemaVersion="0.3.0.0"
  TenantId="farooqiefb2c.onmicrosoft.com"
  PolicyId="B2C_1A_Example"
  PublicPolicyUri="http://farooqiefb2c.onmicrosoft.com/B2C_1A_Example">
	<BuildingBlocks>
		<ClaimsSchema>
			<ClaimType Id="objectId">
				<DataType>string</DataType>
			</ClaimType>
			<ClaimType Id="message">
				<DataType>string</DataType>
			</ClaimType>
			<ClaimType Id="givenName">
				<DisplayName>First Name</DisplayName>
				<DataType>string</DataType>
				<DefaultPartnerClaimTypes>
					<Protocol Name="OAuth2" PartnerClaimType="given_name" />
					<Protocol Name="OpenIdConnect" PartnerClaimType="given_name" />
					<Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname" />
				</DefaultPartnerClaimTypes>
				<UserHelpText>Your given name (also known as first name).</UserHelpText>
				<UserInputType>TextBox</UserInputType>
			</ClaimType>
			<ClaimType Id="surname">
				<DisplayName>Last Name</DisplayName>
				<DataType>string</DataType>
				<DefaultPartnerClaimTypes>
					<Protocol Name="OAuth2" PartnerClaimType="family_name" />
					<Protocol Name="OpenIdConnect" PartnerClaimType="family_name" />
					<Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname" />
				</DefaultPartnerClaimTypes>
				<UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
				<UserInputType>TextBox</UserInputType>
			</ClaimType>
			<ClaimType Id="displayName">
				<DataType>string</DataType>
				<DefaultPartnerClaimTypes>
					<Protocol Name="OAuth2" PartnerClaimType="unique_name" />
					<Protocol Name="OpenIdConnect" PartnerClaimType="name" />
					<Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" />
				</DefaultPartnerClaimTypes>
			</ClaimType>
			<ClaimType Id="accountType">
				<DisplayName>Account Type</DisplayName>
				<DataType>string</DataType>
				<UserHelpText>The type of account being registered.</UserHelpText>
				<UserInputType>DropdownSingleSelect</UserInputType>
				<Restriction>
					<Enumeration Text="Company Account" Value="company" SelectByDefault="false"/>
					<Enumeration Text="Individual Account" Value="individual" SelectByDefault="true"/>
				</Restriction>
			</ClaimType>
			<ClaimType Id="email">
				<DisplayName>Email Address</DisplayName>
				<DataType>string</DataType>
				<DefaultPartnerClaimTypes>
					<Protocol Name="OpenIdConnect" PartnerClaimType="email" />
				</DefaultPartnerClaimTypes>
				<UserHelpText>Email address that can be used to contact you.</UserHelpText>
				<UserInputType>TextBox</UserInputType>
				<Restriction>
					<Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;'^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" HelpText="Please enter a valid email address." />
				</Restriction>
			</ClaimType>
			<ClaimType Id="password">
				<DisplayName>Password</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>Enter password</AdminHelpText>
				<UserHelpText>Enter password</UserHelpText>
				<UserInputType>Password</UserInputType>
				<PredicateValidationReference Id="StrongPassword" />
			</ClaimType>
			<ClaimType Id="domain">
				<DataType>string</DataType>
			</ClaimType>
			<ClaimType Id="domainStatus">
				<DataType>string</DataType>
			</ClaimType>
			<ClaimType Id="accessCode">
				<DisplayName>Access Code</DisplayName>
				<DataType>string</DataType>
				<UserHelpText>Enter your invitation access code.</UserHelpText>
				<UserInputType>Password</UserInputType>
			</ClaimType>
			<ClaimType Id="isValidAccessCode">
				<DataType>boolean</DataType>
			</ClaimType>
			<ClaimType Id="validDomains">
				<DataType>stringCollection</DataType>
			</ClaimType>
			<ClaimType Id="isValidDomain">
				<DataType>boolean</DataType>
			</ClaimType>
		</ClaimsSchema>
		<Predicates>
			<Predicate Id="DisallowedWhitespace" Method="MatchesRegex">
				<UserHelpText>The password must not begin or end with a whitespace character.</UserHelpText>
				<Parameters>
					<Parameter Id="RegularExpression">(^\S.*\S$)|(^\S+$)|(^$)</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="AllowedAADCharacters" Method="MatchesRegex">
				<UserHelpText>An invalid character was provided.</UserHelpText>
				<Parameters>
					<Parameter Id="RegularExpression">(^([0-9A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~"();! ]|(\.(?!@)))+$)|(^$)</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="IsLengthBetween8And64" Method="IsLengthRange">
				<UserHelpText>The password must be between 8 and 64 characters.</UserHelpText>
				<Parameters>
					<Parameter Id="Minimum">8</Parameter>
					<Parameter Id="Maximum">64</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="Lowercase" Method="IncludesCharacters">
				<UserHelpText>a lowercase letter</UserHelpText>
				<Parameters>
					<Parameter Id="CharacterSet">a-z</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="Uppercase" Method="IncludesCharacters">
				<UserHelpText>an uppercase letter</UserHelpText>
				<Parameters>
					<Parameter Id="CharacterSet">A-Z</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="Number" Method="IncludesCharacters">
				<UserHelpText>a digit</UserHelpText>
				<Parameters>
					<Parameter Id="CharacterSet">0-9</Parameter>
				</Parameters>
			</Predicate>
			<Predicate Id="Symbol" Method="IncludesCharacters">
				<UserHelpText>a symbol</UserHelpText>
				<Parameters>
					<Parameter Id="CharacterSet">@#$%^&amp;*\-_+=[]{}|\\:',.?/`~"();!</Parameter>
				</Parameters>
			</Predicate>
		</Predicates>
		<PredicateValidations>
			<PredicateValidation Id="StrongPassword">
				<PredicateGroups>
					<PredicateGroup Id="DisallowedWhitespaceGroup">
						<PredicateReferences>
							<PredicateReference Id="DisallowedWhitespace" />
						</PredicateReferences>
					</PredicateGroup>
					<PredicateGroup Id="AllowedAADCharactersGroup">
						<PredicateReferences>
							<PredicateReference Id="AllowedAADCharacters" />
						</PredicateReferences>
					</PredicateGroup>
					<PredicateGroup Id="LengthGroup">
						<PredicateReferences>
							<PredicateReference Id="IsLengthBetween8And64" />
						</PredicateReferences>
					</PredicateGroup>
					<PredicateGroup Id="CharacterClasses">
						<UserHelpText>The password must have at least 3 of the following:</UserHelpText>
						<PredicateReferences MatchAtLeast="3">
							<PredicateReference Id="Lowercase" />
							<PredicateReference Id="Uppercase" />
							<PredicateReference Id="Number" />
							<PredicateReference Id="Symbol" />
						</PredicateReferences>
					</PredicateGroup>
				</PredicateGroups>
			</PredicateValidation>
		</PredicateValidations>
		<ClaimsTransformations>
			<ClaimsTransformation Id="GenerateObjectIdTransformation" TransformationMethod="CreateRandomString">
				<InputParameters>
					<InputParameter Id="randomGeneratorType" DataType="string" Value="GUID"/>
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="objectId" TransformationClaimType="outputClaim"/>
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CreateDisplayNameTransformation" TransformationMethod="FormatStringMultipleClaims">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputClaim1"/>
					<InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputClaim2"/>
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringFormat" DataType="string" Value="{0} {1}"/>
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="outputClaim"/>
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CreateMessageTransformation" TransformationMethod="FormatStringClaim">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="inputClaim"/>
				</InputClaims>
				<InputParameters>
					<InputParameter Id="stringFormat" DataType="string" Value="Hello {0}"/>
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="message" TransformationClaimType="outputClaim"/>
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="GetDomainFromEmail" TransformationMethod="ParseDomain">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="email" TransformationClaimType="emailAddress" />
				</InputClaims>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="domain" TransformationClaimType="domain" />
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="CheckIfIsValidAccessCode" TransformationMethod="CompareClaimToValue">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="accessCode" TransformationClaimType="inputClaim1"/>
				</InputClaims>
				<InputParameters>
					<InputParameter Id="compareTo" DataType="string" Value="123456"/>
					<InputParameter Id="operator" DataType="string" Value="equal"/>
					<InputParameter Id="ignoreCase" DataType="string" Value="true"/>
				</InputParameters>
				<OutputClaims>
					<OutputClaim ClaimTypeReferenceId="isValidAccessCode" TransformationClaimType="outputClaim"/>
				</OutputClaims>
			</ClaimsTransformation>
			<ClaimsTransformation Id="ThrowIfIsNotValidAccessCode" TransformationMethod="AssertBooleanClaimIsEqualToValue">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="isValidAccessCode" TransformationClaimType="inputClaim"/>
				</InputClaims>
				<InputParameters>
					<InputParameter Id="valueToCompareTo" DataType="boolean" Value="true"/>
				</InputParameters>
			</ClaimsTransformation>
			<ClaimsTransformation Id="AssertIsValidDomainIsTrue" TransformationMethod="AssertBooleanClaimIsEqualToValue">
				<InputClaims>
					<InputClaim ClaimTypeReferenceId="isValidDomain" TransformationClaimType="inputClaim" />
				</InputClaims>
				<InputParameters>
					<InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
				</InputParameters>
			</ClaimsTransformation>
		</ClaimsTransformations>
		<ContentDefinitions>
			<ContentDefinition Id="SelfAssertedContentDefinition">
				<LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
				<RecoveryUri>~/common/default_page_error.html</RecoveryUri>
				<DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:1.2.0</DataUri>
			</ContentDefinition>
		</ContentDefinitions>
	</BuildingBlocks>
	<ClaimsProviders>
		<ClaimsProvider>
			<!-- The technical profile(s) defined in this section is required by the framework to be included in all policies. -->
			<DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
					<DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
					<Protocol Name="None" />
					<Metadata>
						<Item Key="url">{service:te}</Item>
					</Metadata>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<!-- 
  The technical profile(s) defined in this section specify Token Issuers that are used by the required SendClaims step of a User Journey 
  to return a token to the caller.
  -->
			<DisplayName>Token Issuer Technical Profiles</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="JwtIssuer">
					<DisplayName>JWT Issuer</DisplayName>
					<Protocol Name="None" />
					<OutputTokenFormat>JWT</OutputTokenFormat>
					<Metadata>
						<Item Key="client_id">{service:te}</Item>
						<Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
						<Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
						<Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer" />
					</CryptographicKeys>
					<InputClaims />
					<OutputClaims />
				</TechnicalProfile>
				<TechnicalProfile Id="RandomObjectIdClaimGenerator">
					<!--
    In order for an Object ID to be returned (this is required in an interactive profile) one of the journey steps must include it as an output claim. 
    In this case, it is being done as a claims transformation without any input, but instead is generating a random value using a claims transformation.
    -->
					<DisplayName>Random Object ID Claim Generator Technical Profile</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="GenerateObjectIdTransformation"/>
					</OutputClaimsTransformations>
				</TechnicalProfile>
				<TechnicalProfile Id="UserInputMessageClaimGenerator">
					<!--
  Generates the content of the message claim by applying the relevant claims transformation
  -->
					<DisplayName>Display Name Claim Generator Technical Profile</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="displayName"/>
						<OutputClaim ClaimTypeReferenceId="message"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateDisplayNameTransformation"/>
						<OutputClaimsTransformation ReferenceId="CreateMessageTransformation"/>
					</OutputClaimsTransformations>
				</TechnicalProfile>
				<TechnicalProfile Id="AccessCodeInputCollector">
					<DisplayName>Collect Access Code Input Technical Profile</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
						<Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Invalid access code.</Item>
					</Metadata>
					<DisplayClaims>
						<DisplayClaim ClaimTypeReferenceId="accessCode" Required="true"/>
					</DisplayClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="accessCode"/>
					</OutputClaims>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="CheckAccessCodeViaHttp"/>
					</ValidationTechnicalProfiles>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<!--
  The technical profile defined in this section allows a user to enter their first and last name, then composes the message text based on those entries.
  -->
			<DisplayName>Sample User Input Collection Technical Profiles</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="UserInformationCollector">
					<DisplayName>Collect Sample User Input Technical Profile</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
						<Item Key="LookupNotFound">The provided email address was not from a valid company.</Item>
						<Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">The provided email address was not from a valid company.</Item>
					</Metadata>
					<DisplayClaims>
						<DisplayClaim ClaimTypeReferenceId="givenName" Required="true"/>
						<DisplayClaim ClaimTypeReferenceId="surname"  Required="true"/>
						<DisplayClaim ClaimTypeReferenceId="accountType" Required="true"/>
						<DisplayClaim ClaimTypeReferenceId="email" Required="true"/>
						<DisplayClaim ClaimTypeReferenceId="password" Required="true"/>
					</DisplayClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="givenName"/>
						<OutputClaim ClaimTypeReferenceId="surname"/>
						<OutputClaim ClaimTypeReferenceId="accountType"/>
						<OutputClaim ClaimTypeReferenceId="email"/>
						<OutputClaim ClaimTypeReferenceId="password"/>
						<OutputClaim ClaimTypeReferenceId="domain"/>
						<OutputClaim ClaimTypeReferenceId="domainStatus"/>
						<OutputClaim ClaimTypeReferenceId="validDomains"/>
					</OutputClaims>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="HttpCompanyDomainsCollector">
							<Preconditions>
								<Precondition Type="ClaimEquals" ExecuteActionsIf="false">
									<Value>accountType</Value>
									<Value>company</Value>
									<Action>SkipThisValidationTechnicalProfile</Action>
								</Precondition>
							</Preconditions>
						</ValidationTechnicalProfile>
						<ValidationTechnicalProfile ReferenceId="HttpStringCollectionContainsClaim">
							<Preconditions>
								<Precondition Type="ClaimEquals" ExecuteActionsIf="false">
									<Value>accountType</Value>
									<Value>company</Value>
									<Action>SkipThisValidationTechnicalProfile</Action>
								</Precondition>
							</Preconditions>
						</ValidationTechnicalProfile>
					</ValidationTechnicalProfiles>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<!-- HTTP Request Technical Profiles -->
		<ClaimsProvider>
			<!--
  The technical profiles defined in this section perform HTTP requests.
  -->
			<DisplayName>Sample HTTP Request Technical Profiles</DisplayName>
			<!-- HTTP Request Technical Profiles -->
			<TechnicalProfiles>
				<TechnicalProfile Id="HttpCompanyDomainsCollector">
					<DisplayName>Collect Sample Company Domains Technical Profile</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ServiceUrl">http://2816b19456ed.ngrok.io/api/domains</Item>
						<Item Key="SendClaimsIn">QueryString</Item>
						<Item Key="AuthenticationType">None</Item>
						<Item Key="AllowInsecureAuthInProduction">true</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="validDomains" PartnerClaimType="domains" Required="true"/>
					</OutputClaims>
				</TechnicalProfile>
				<TechnicalProfile Id="HttpStringCollectionContainsClaim">
					<DisplayName>Use an HTTP call to determine if a String Collection contains a Claim value</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ServiceUrl">http://2816b19456ed.ngrok.io/api/stringcollectioncontainsclaim</Item>
						<Item Key="SendClaimsIn">Body</Item>
						<Item Key="AuthenticationType">None</Item>
						<Item Key="AllowInsecureAuthInProduction">true</Item>
					</Metadata>
					<InputClaimsTransformations>
						<InputClaimsTransformation ReferenceId="GetDomainFromEmail"/>
					</InputClaimsTransformations>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="validDomains" PartnerClaimType="inputClaim"/>
						<InputClaim ClaimTypeReferenceId="domain" PartnerClaimType="item"/>
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="isValidDomain" PartnerClaimType="outputClaim" Required="true"/>
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="AssertIsValidDomainIsTrue"/>
					</OutputClaimsTransformations>
				</TechnicalProfile>
				<TechnicalProfile Id="CheckAccessCodeViaHttp">
					<DisplayName>Check that the user has entered a valid access code by using Claims Transformations</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ServiceUrl">http://2816b19456ed.ngrok.io/api/verifyaccesscode</Item>
						<Item Key="SendClaimsIn">Body</Item>
						<Item Key="AuthenticationType">None</Item>
						<Item Key="AllowInsecureAuthInProduction">true</Item>
						<Item Key="DebugMode">true</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userEmail"/>
						<InputClaim ClaimTypeReferenceId="accessCode" PartnerClaimType="accessCode"/>
					</InputClaims>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
	</ClaimsProviders>
	<UserJourneys>
		<UserJourney Id="HelloWorldJourney">
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="GetObjectIdClaimsExchange" TechnicalProfileReferenceId="RandomObjectIdClaimGenerator" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="GetUserInformationClaimsExchange" TechnicalProfileReferenceId="UserInformationCollector" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>accountType</Value>
							<Value>company</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="GetAccessCodeClaimsExchange" TechnicalProfileReferenceId="AccessCodeInputCollector" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="GetMessageClaimsExchange" TechnicalProfileReferenceId="UserInputMessageClaimGenerator"/>
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
		</UserJourney>
	</UserJourneys>
	<RelyingParty>
		<DefaultUserJourney ReferenceId="HelloWorldJourney"/>
		<TechnicalProfile Id="HelloWorldPolicyProfile">
			<DisplayName>Hello World Policy Profile</DisplayName>
			<Protocol Name="OpenIdConnect" />
			<OutputClaims>
				<OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub" />
				<OutputClaim ClaimTypeReferenceId="displayName" />
				<OutputClaim ClaimTypeReferenceId="message" />
				<OutputClaim ClaimTypeReferenceId="accountType"/>
				<OutputClaim ClaimTypeReferenceId="email"/>
				<OutputClaim ClaimTypeReferenceId="password"/>
				<OutputClaim ClaimTypeReferenceId="domain"/>
				<OutputClaim ClaimTypeReferenceId="domainStatus"/>
				<OutputClaim ClaimTypeReferenceId="validDomains"/>
			</OutputClaims>
			<SubjectNamingInfo ClaimType="sub" />
		</TechnicalProfile>
	</RelyingParty>
</TrustFrameworkPolicy>